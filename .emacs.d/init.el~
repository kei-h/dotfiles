;;-*- coding: utf-8 -*-

;;;;;;;;;
;;~/.emacs.d/
;;    init.el
;;    conf         　分割設定用ディレクトリ
;;    elisp        　Elisp用インストールディレクトリ 
;;    elpa　　
;;　　el-get 　      パッケージ管理
;;    public_repos 　公開リポジトリから拡張機能をチェックアウトするディレクトリ
;;    etc
;;    info


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;El-Get
;;http://d.hatena.ne.jp/tarao/20150221/1424518030
(when load-file-name
  (setq user-emacs-directory (file-name-directory load-file-name)))

(add-to-list 'load-path (locate-user-emacs-file "el-get/el-get"))
(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
    (goto-char (point-max))
    (eval-print-last-sexp)))

;;(el-get-bundle auto-complete)
(el-get-bundle helm)

(el-get-bundle jedi-core)
(el-get-bundle company-jedi :depends (company-mode))

;; ;;バージョン固定
;; (el-get-bundle tarao/el-get-lock)
;; (el-get-lock)



;;;;;;;;;;;;;;;;;;;;
;; load-pathを追加する関数を定義

(defun add-to-load-path (&rest paths)
  (let (path)
    (dolist (path paths paths)
      (let ((default-directory
	      (expand-file-name (concat user-emacs-directory path))))
	(add-to-list 'load-path default-directory)
	(if (fboundp 'normal-top-level-add-subdirs-to-load-path)
	    (normal-top-level-add-subdirs-to-load-path))))))

;;引数のディレクトリとそのサブディレクトリをload-pathに追加
(add-to-load-path "elisp" "conf" "public_repos" "el-get")

;;confディレクトリを読み込む
(require 'init-loader)
;;(setq init-loader-show-log-after-init nil)
(init-loader-load "~/.emacs.d/conf")






(require 'package)
;; MELPAを追加
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

;; 初期化 el-getとぶつかるので、el-getの後で実施
(package-initialize)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;文字コード関連設定
(require 'ucs-normalize)(setenv "LANG" "ja_JP.UTF-8")
(set-language-environment 'utf-8)
(prefer-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
(setq system-uses-terminfo nil)

;;
(add-to-list 'default-frame-alist '(font . "MigMix 1M"))


;;diredの文字化け対応
(set-file-name-coding-system 'utf-8-unix)

;;カレントのshellだと、コマンドを入力して文字化け直った。
;;(set-buffer-process-coding-system 'utf-8 'utf-8)
;;フックして常に文字化け直す
(defun shell-mode-hooks()
	(set-buffer-process-coding-system 'utf-8 'utf-8))
(add-hook 'shell-mode-hook 'shell-mode-hooks)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar eww-disable-colorize t)
(defun shr-colorize-region--disable (orig start end fg &optional bg &rest _)
  (unless eww-disable-colorize
    (funcall orig start end fg)))
(advice-add 'shr-colorize-region :around 'shr-colorize-region--disable)
(advice-add 'eww-colorize-region :around 'shr-colorize-region--disable)
(defun eww-disable-color ()
  "eww で文字色を反映させない"
  (interactive)
  (setq-local eww-disable-colorize t)
  (eww-reload))
(defun eww-enable-color ()
  "eww で文字色を反映させる"
  (interactive)
  (setq-local eww-disable-colorize nil)
  (eww-reload))

(setq eww-search-prefix "http://www.google.co.jp/search?q=")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'company)
(global-company-mode) ; 全バッファで有効にする 
(setq company-idle-delay 0) ; デフォルトは0.5
(setq company-minimum-prefix-length 2) ; デフォルトは4
(setq company-selection-wrap-around t) ; 候補の一番下でさらに下に行こうとすると一番上に戻る
(define-key company-active-map (kbd "M-n") nil)
(define-key company-active-map (kbd "M-p") nil)
(define-key company-active-map (kbd "C-n") 'company-select-next)
(define-key company-active-map (kbd "C-p") 'company-select-previous)
(define-key company-active-map (kbd "C-h") nil)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'tramp)
(setq tramp-default-method "ssh")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (add-to-list 'load-path
;;               "~/.emacs.d/el-get/yasnippet")
;; (require 'yasnippet)
;; (yas-global-mode 1)

;; ;; 既存スニペットを挿入
;; (define-key yas-minor-mode-map (kbd "C-x y i") 'yas-insert-snippet)
;; ;; 新規スニペットを作成するバッファを用意する
;; (define-key yas-minor-mode-map (kbd "C-x y n") 'yas-new-snippet)
;; ;; 既存スニペットの閲覧、編集
;; (define-key yas-minor-mode-map (kbd "C-x y v") 'yas-visit-snippet-file)


;;
(require 'helm-config)
(helm-mode 1)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x C-f") 'helm-find-files)




;; ;;
;; (require 'fill-column-indicator)
;; (define-globalized-minor-mode
;;  global-fci-mode fci-mode (lambda () (fci-mode 1)))
;; (global-fci-mode t)



;; ;;muti-term
;; (when (require 'multi-term nil t)
;;   ;;使用するshellを設定
;;   (setq muti-term-program "/usr/bin/bash"))

;; ;;quickrun
;; (require 'quickrun)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; ; use IPython
;; (setq-default py-shell-name "ipython")
;; (setq-default py-which-bufname "IPython")
;; ; use the wx backend, for both mayavi and matplotlib
;; (setq py-python-command-args
;;   '("--gui=wx" "--pylab=wx" "-colors" "Linux"))
;; (setq py-force-py-shell-name-p t)

;; ; not switch to the interpreter after executing code
;; (setq py-shell-switch-buffers-on-execute-p nil)
;; (setq py-switch-buffers-on-execute-p nil)
;; ; don't split windows
;; (setq py-split-windows-on-execute-p nil)
;; ; try to automagically figure out indentation
;; (setq py-smart-indentation t)
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; I'll give you a hint to get started.

;; If conda's ROOT_DIR/envs/NAME directory has a similar structure to virtualenv, this should work:

;; (setq jedi:server-args
;;       '("--virtual-env" "ROOT_DIR_1/envs/NAME_1"
;;         "--virtual-env" "ROOT_DIR_2/envs/NAME_2"
;;         ;; ... and more! ...
;;         ))
;; Otherwise, you can use --sys-path:

;; (setq jedi:server-args
;;       '("--sys-path" "ROOT_DIR_1/envs/NAME_1/.../site-packages"
;;         "--sys-path" "ROOT_DIR_2/envs/NAME_2/.../site-packages"
;;         ;; ... and more! ...
;;         ))
;; See also: http://tkf.github.io/emacs-jedi/latest/#jedi:server-args

;; If you want to automate more, you are welcome to add --conda-env option to jediepcserver.py. You can start from copying & modifying add_virtualenv_path in jediepcserver.py.

(require 'jedi-core)

;(setq jedi:server-args '("--virtual-env" "/home/hirotakei/anaconda3/envs/py36"
;                         "--sys-path" "/home/hirotakei/anaconda3/envs/py36/lib/python3.6/site-packages"
;                        )
;)

(setq jedi:complete-on-dot t)
(setq jedi:use-shortcuts t)

(defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi)
)

(add-hook 'python-mode-hook 'my/python-mode-hook)


(require 'auto-virtualenvwrapper)
(add-hook 'python-mode-hook #'auto-virtualenvwrapper-activate)
(venv-initialize-interactive-shells) ;; if you want interactive shell support
(setq python-shell-completion-native-enable nil)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'py-autopep8)
 
;; 保存時にバッファ全体を自動整形する
(add-hook 'before-save-hook 'py-autopep8-before-save)
(define-key python-mode-map (kbd "C-c f") 'py-autopep8)

;;errorやwarningを表示する
(require 'flymake-python-pyflakes)
(flymake-python-pyflakes-load)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(add-hook 'c-mode-common-hook
          '(lambda ()
             ;; センテンスの終了である ';' を入力したら、自動改行+インデント
             (c-toggle-auto-hungry-state 1)
             ;; RET キーで自動改行+インデント
             (define-key c-mode-base-map "\C-m" 'newline-and-indent)
))

;;changelogなどに使われる
(setq user-full-name "Kei Hirota")
(setq user-mail-address "k_hirota@nifty.com")

;;migemo
;;(when (and (executable-find "cmigemo")
   ;;        (require 'migemo nil t))
 ;; (setq migemo-options '("-q" "--emacs"))
;;
;;  (setq migemo-user-dictionary nil)
;;  (setq migemo-regex-dictionary nil)
 ;; (setq migemo-coding-system 'utf-8-unix)
 ;; (load-library "migemo")
;;  (migemo-init)
;;)
;;(require 'migemo nil t)

;;(require 'migemo)
;;(setq migemo-command "cmigemo")
;;(setq migemo-options '("-q" "--emacs"))
;;(setq migemo-dictionary "/usr/share/cmigemo/utf-8/migemo-dict")
;;(setq migemo-user-dictionary nil)
;;(setq migemo-coding-system 'utf-8-unix)
;;(setq migemo-regex-dictionary nil)
;;(load-library "migemo")
;;(migemo-init)


;; (eval-after-load "migemo"
;; '(defadvice isearch-search (around migemo-search-ad activate)
;; "adviced by migemo."
;; (let ((saved-isearch-lax-whitespace isearch-lax-whitespace))
;; (when migemo-isearch-enable-p
;; (setq migemo-do-isearch t)
;; (setq isearch-lax-whitespace nil))
;; (unwind-protect
;; ad-do-it
;; (setq migemo-do-isearch nil)
;; (setq isearch-lax-whitespace saved-isearch-lax-whitespace))))
;; )

;; ;;htmlizeの設定
;; (autoload 'htmlize-buffer "htmlize" 
;;   "Convert BUFFER to HTML, preserving colors and decorations." t)
;; (autoload 'htmlize-region "htmlize" 
;;   "Convert the region to HTML, preserving colors and decorations." t)
;; (autoload 'htmlize-file "htmlize" 
;;   "Load FILE, fontify it, convert it to HTML, and save the result." t)



;; ;;redo+.el追加
;; ;;http://www.emacswiki.org/emacs/download/redo+.el
;; (when (require 'redo+ nil t)
;;   (global-set-key (kbd "C-.") 'redo))


;; ファイル・ディレクトリ名のリストを編集することで、まとめてリネーム可能にする
(require 'wdired)
;; wdiredモードに入るキー(下の例では「r」)
(define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)

;;ファイルサイズを表示
(size-indication-mode t)
;;時計を表示
;(setq display-time-day-and-date t)
(setq display-time-24hr-format t)
(display-time-mode t)

;;タイトルバーにファイルのフルパスを表示
(setq frame-title-format "%f")
;;
(load-theme 'wombat t)



;; ;;行番号を表示
;; (require 'linum)
;; (global-linum-mode)

;;現在行を強調表示
(defface my-hl-line-face
  ;;背景がdarkならば背景色を紺色に
  '((((class color) (background dark))
     (:background "NavyBlue" t))
    ;;背景がlightならば背景色を緑に
    (((class color) (background light))
     (:background "LightGoldenrodYellow" t))
    (t (:bold t)))
  "hl-line's my face")
(setq hl-line-face 'my-hl-line-face)
(global-hl-line-mode t)

;;emacs-lisp-modeのhookをセット
(add-hook 'emacs-lisp-mode-hook
	  '(lambda ()
	     (when (require 'eldoc nil t)
	       (setq eldoc-idle-delay 0.2)
	       (setq eldoc-echo-area-use-multiline-p t)
	       (turn-on-eldoc-mode))))

;; ;; key-chordを読み込む
;; (require 'key-chord)
;; (key-chord-mode 1)
;; (setq key-chord-two-keys-delay 0.05)
;; (key-chord-define-global "df" 'help-command)
;; (key-chord-define-global "hj" 'undo)


(require 'mozc)
;;or (load-file mozc.el)
(set-language-environment "Japanese")
(setq default-input-method "japanese-mozc")
(setq mozc-candidate-style 'overlay)

(set-fontset-font
 nil 'japanese-jisx0208
 (font-spec :family "MigMix 1M"))
;; ;;日本語入力モード時はカーソルの色を変える
(setq mozc-color "blue")

 ;; (defun mozc-change-cursor-color ()
 ;;   (if mozc-mode
 ;;       (set-buffer-local-cursor-color mozc-color)
 ;;     (set-buffer-local-cursor-color nil)))

 ;; (add-hook 'input-method-activate-hook
 ;;           (lambda () (mozc-change-cursor-color)))


;;
;;(add-to-list 'default-frame-alist '(font . "MigMix 1M"))


;; ;; Gaucheのデフォルトエンコーディングに合わせます。
;; ;; Gaucheのデフォルトエンコーディングがeuc-jpの時はutf-8をeuc-jpに
;; ;; してください。
;; (setq process-coding-system-alist
;;       (cons '("gosh" utf-8 . utf-8) process-coding-system-alist))
;; ;; goshインタプリタのパスに合わせます。-iは対話モードを意味します。
;; (setq gosh-program-name "/usr/local/bin/gosh -i")
;; ;; schemeモードとrun-schemeモードにcmuscheme.elを使用します。
;; (autoload 'scheme-mode "cmuscheme" "Major mode for Scheme." t)
;; (autoload 'run-scheme "cmuscheme" "Run an inferior Scheme process." t)
;; ;; ウィンドウを2つに分け、一方でgoshインタプリタを実行するコマンドを定義します。
;; (defun scheme-other-window ()
;;   "Run scheme on other window"
;;   (interactive)
;;   (switch-to-buffer-other-window
;;    (get-buffer-create "*scheme*"))
;;   (run-scheme gosh-program-name))
;; ;; そのコマンドをCtrl-cSで呼び出します。
;; (define-key global-map
;;   "\C-cS" 'scheme-other-window)

;; ;; 直前/直後の括弧に対応する括弧を光らせます。
;; (show-paren-mode)

;; ;; 以下はインデントの定義です。
;; (put 'and-let* 'scheme-indent-function 1)
;; (put 'begin0 'scheme-indent-function 0)
;; (put 'call-with-client-socket 'scheme-indent-function 1)
;; (put 'call-with-input-conversion 'scheme-indent-function 1)
;; (put 'call-with-input-file 'scheme-indent-function 1)
;; (put 'call-with-input-process 'scheme-indent-function 1)
;; (put 'call-with-input-string 'scheme-indent-function 1)
;; (put 'call-with-iterator 'scheme-indent-function 1)
;; (put 'call-with-output-conversion 'scheme-indent-function 1)
;; (put 'call-with-output-file 'scheme-indent-function 1)
;; (put 'call-with-output-string 'scheme-indent-function 0)
;; (put 'call-with-temporary-file 'scheme-indent-function 1)
;; (put 'call-with-values 'scheme-indent-function 1)
;; (put 'dolist 'scheme-indent-function 1)
;; (put 'dotimes 'scheme-indent-function 1)
;; (put 'if-match 'scheme-indent-function 2)
;; (put 'let*-values 'scheme-indent-function 1)
;; (put 'let-args 'scheme-indent-function 2)
;; (put 'let-keywords* 'scheme-indent-function 2)
;; (put 'let-match 'scheme-indent-function 2)
;; (put 'let-optionals* 'scheme-indent-function 2)
;; (put 'let-syntax 'scheme-indent-function 1)
;; (put 'let-values 'scheme-indent-function 1)
;; (put 'let/cc 'scheme-indent-function 1)
;; (put 'let1 'scheme-indent-function 2)
;; (put 'letrec-syntax 'scheme-indent-function 1)
;; (put 'make 'scheme-indent-function 1)
;; (put 'multiple-value-bind 'scheme-indent-function 2)
;; (put 'match 'scheme-indent-function 1)
;; (put 'parameterize 'scheme-indent-function 1)
;; (put 'parse-options 'scheme-indent-function 1)
;; (put 'receive 'scheme-indent-function 2)
;; (put 'rxmatch-case 'scheme-indent-function 1)
;; (put 'rxmatch-cond 'scheme-indent-function 0)
;; (put 'rxmatch-if  'scheme-indent-function 2)
;; (put 'rxmatch-let 'scheme-indent-function 2)
;; (put 'syntax-rules 'scheme-indent-function 1)
;; (put 'unless 'scheme-indent-function 1)
;; (put 'until 'scheme-indent-function 1)
;; (put 'when 'scheme-indent-function 1)
;; (put 'while 'scheme-indent-function 1)
;; (put 'with-builder 'scheme-indent-function 1)
;; (put 'with-error-handler 'scheme-indent-function 0)
;; (put 'with-error-to-port 'scheme-indent-function 1)
;; (put 'with-input-conversion 'scheme-indent-function 1)
;; (put 'with-input-from-port 'scheme-indent-function 1)
;; (put 'with-input-from-process 'scheme-indent-function 1)
;; (put 'with-input-from-string 'scheme-indent-function 1)
;; (put 'with-iterator 'scheme-indent-function 1)
;; (put 'with-module 'scheme-indent-function 1)
;; (put 'with-output-conversion 'scheme-indent-function 1)
;; (put 'with-output-to-port 'scheme-indent-function 1)
;; (put 'with-output-to-process 'scheme-indent-function 1)
;; (put 'with-output-to-string 'scheme-indent-function 1)
;; (put 'with-port-locking 'scheme-indent-function 1)
;; (put 'with-string-io 'scheme-indent-function 1)
;; (put 'with-time-counter 'scheme-indent-function 1)
;; (put 'with-signal-handlers 'scheme-indent-function 1)
;; (put 'with-locking-mutex 'scheme-indent-function 1)
;; (put 'guard 'scheme-indent-function 1)






;; ;;install-elisp wikiから
;; ;; (require 'one-key-default) ; one-key.el も一緒に読み込んでくれる
;; ;; (require 'one-key-config) ; one-key.el をより便利にする
;; ;; (one-key-default-setup-keys) ; one-key- で始まるメニュー使える様になる
;; ;; ;;(define-key global-map "\C-x" 'one-key-menu-C-x) ;; C-x にコマンドを定義
;; (put 'downcase-region 'disabled nil)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages (quote (flymake-coffee flymake-python-pyflakes elpy))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
